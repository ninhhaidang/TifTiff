"""
C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng TifTiff
"""

import os
import threading
import tkinter as tk
from tkinter import StringVar, BooleanVar, filedialog
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinterdnd2 import DND_FILES

from ui.tabs.basic_tab import BasicTab
from ui.tabs.geo_tab import GeoTab
from ui.tabs.adjust_tab import AdjustTab
from ui.tabs.options_tab import OptionsTab
from ui.tabs.log_tab import LogTab

from resources.constants import ICONS, resource_path, COMMON_CRS
from resources.translations import get_translation
from utils.config import config_manager, get_config, set_config
from utils.logger import logger
from processing.image_processor import ImageProcessor
from processing.geo_processor import GeoProcessor
from processing.metadata_processor import MetadataProcessor

class MainWindow:
    """C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self, master):
        """Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh"""
        self.master = master
        
        # ƒê·ªãnh nghƒ©a font
        self.bold_font = ("Segoe UI", 10, "bold")
        self.normal_font = ("Segoe UI", 10)
        self.small_font = ("Segoe UI", 9)
        self.header_font = ("Segoe UI", 11, "bold")
        
        # Bi·∫øn d·ªØ li·ªáu
        self.input_folder = ""
        self.output_folder = ""
        self.input_files = []
        self.current_image = None
        self.current_image_path = ""
        
        # C√°c bi·∫øn c√†i ƒë·∫∑t c∆° b·∫£n
        self.input_path_var = StringVar()
        self.output_path_var = StringVar()
        self.remove_white_bg = BooleanVar(value=False)
        self.remove_black_bg = BooleanVar(value=False)
        self.output_format_var = StringVar(value=".png")
        self.scale_ratio_var = StringVar(value="1.0")
        
        # Th√™m bi·∫øn cho ch·ª©c nƒÉng chuy·ªÉn ƒë·ªïi h·ªá t·ªça ƒë·ªô
        self.enable_reproject = BooleanVar(value=False)
        self.source_crs_var = StringVar(value="")
        self.target_crs_var = StringVar(value="EPSG:4326")
        self.detected_crs_var = StringVar(value="")
        
        # Th√™m bi·∫øn cho vi·ªác xu·∫•t ·∫£nh v·ªõi h·ªá t·ªça ƒë·ªô
        self.preserve_geospatial = BooleanVar(value=True)
        self.geo_format_var = StringVar(value="GeoTIFF (.tif)")
        
        # Th√™m bi·∫øn cho ƒëi·ªÅu ch·ªânh ·∫£nh
        self.brightness_var = StringVar(value="1.0")
        self.contrast_var = StringVar(value="1.0")
        self.saturation_var = StringVar(value="1.0")
        
        # Bi·∫øn giao di·ªán
        self.theme_var = StringVar(value="cosmo")
        self.language_var = StringVar(value="en")
        self.is_dark_mode = BooleanVar(value=False)
        
        # Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i kh·ªüi t·∫°o UI
        self.ui_initialized = False
        
        # Bi·∫øn tr·∫°ng th√°i
        self.status_var = StringVar(value="")
        self.is_processing = False
        
        # Kh·ªüi t·∫°o logger
        self.logger = logger
        self.logger.set_master(self.master)
        self.logger.set_status_var(self.status_var)
        
        # Kh·ªüi t·∫°o c√°c processor
        self.image_processor = ImageProcessor(self.logger)
        self.geo_processor = GeoProcessor(self.logger)
        self.metadata_processor = MetadataProcessor(self.logger)
        
        # N·∫°p c·∫•u h√¨nh
        self._load_config()
        
        # Chu·∫©n b·ªã giao di·ªán
        self._configure_master()
        
        # T·∫°o UI
        self._build_ui()
        
        # ƒê√°nh d·∫•u UI ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
        self.ui_initialized = True
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i UI sau khi ƒë√£ kh·ªüi t·∫°o
        self._update_geo_options()
        self.status_var.set(self._("ready"))
        
    def _(self, key):
        """H√†m d·ªãch ng√¥n ng·ªØ d·ª±a tr√™n kh√≥a"""
        return get_translation(key, self.language_var.get())
        
    def _configure_master(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        # √Åp d·ª•ng ch·ªß ƒë·ªÅ
        self.style = ttk.Style(self.theme_var.get())
        
        # C·∫•u h√¨nh c·ª≠a s·ªï
        self.master.title(self._("app_title"))
        self.master.geometry("850x700")
        self.master.iconbitmap(resource_path("icon.ico"))
        
        # T·ª± ƒë·ªông c·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ khi thay ƒë·ªïi
        self.theme_var.trace_add("write", self._update_theme)
        self.language_var.trace_add("write", self._update_language)
        
    def _tab_icon_key(self, idx):
        """Tr·∫£ v·ªÅ key icon cho tab d·ª±a v√†o index"""
        icons = {
            0: "input",
            1: "geo",
            2: "adjust",
            3: "options",
            4: "info"
        }
        return icons.get(idx, "info")
        
    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng ch√≠nh"""
        # T·∫°o frame ch√≠nh
        main_frame = ttk.Frame(self.master, padding=10)
        main_frame.pack(fill="both", expand=True)
        
        # T·∫°o notebook ƒë·ªÉ ch·ª©a c√°c tab
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Tab ch√≠nh: C∆° b·∫£n
        basic_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(basic_tab, text=f"{ICONS['input']} {self._('basic_tab')}")
        
        # Tab n√¢ng cao: Chuy·ªÉn ƒë·ªïi h·ªá t·ªça ƒë·ªô
        geo_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(geo_tab, text=f"{ICONS['geo']} {self._('geo_tab')}")
        
        # Tab ƒëi·ªÅu ch·ªânh ·∫£nh
        adjust_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(adjust_tab, text=f"{ICONS['adjust']} {self._('advanced_tab')}")
        
        # Tab t√πy ch·ªçn
        options_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(options_tab, text=f"{ICONS['options']} {self._('options_tab')}")
        
        # Tab nh·∫≠t k√Ω
        log_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(log_tab, text=f"{ICONS['info']} {self._('log_tab')}")
        
        # X√¢y d·ª±ng c√°c tab
        self.basic_tab = BasicTab(basic_tab, self)
        self.geo_tab = GeoTab(geo_tab, self)
        self.adjust_tab = AdjustTab(adjust_tab, self)
        self.options_tab = OptionsTab(options_tab, self)
        self.log_tab = LogTab(log_tab, self)
        
        # Ph·∫ßn d∆∞·ªõi: Ti·∫øn tr√¨nh v√† n√∫t b·∫Øt ƒë·∫ßu
        bottom_frame = ttk.Frame(main_frame)
        bottom_frame.pack(fill="x", pady=(10, 0))
        
        # Ti·∫øn tr√¨nh
        progress_frame = ttk.LabelFrame(bottom_frame, text=f"{ICONS['progress']} {self._('progress')}", padding=10)
        progress_frame.pack(fill="x", pady=(0, 10))
        
        self.progress = ttk.Progressbar(progress_frame, orient="horizontal", mode="determinate", length=500)
        self.progress.pack(fill="x", pady=(5, 10))
        
        # N√∫t b·∫Øt ƒë·∫ßu
        button_frame = ttk.Frame(bottom_frame)
        button_frame.pack(fill="x")
        
        self.start_button = ttk.Button(
            button_frame,
            text=f"{ICONS['convert']} {self._('start_processing')}",
            command=self.start_conversion,
            style="success.TButton",
            width=20,
            bootstyle=SUCCESS
        )
        self.start_button.pack(side="right", padx=5)
        
        # Thanh tr·∫°ng th√°i
        status_bar = ttk.Frame(main_frame, bootstyle="secondary")
        status_bar.pack(fill="x", side="bottom", pady=(10, 0))
        
        ttk.Label(status_bar, textvariable=self.status_var, font=self.small_font, padding=5).pack(side="left")
        
    def _update_theme(self, *args):
        """C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ khi ng∆∞·ªùi d√πng thay ƒë·ªïi"""
        theme = self.theme_var.get()
        self.style = ttk.Style(theme)
        
        # Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† ch·ªß ƒë·ªÅ t·ªëi kh√¥ng
        is_dark = theme in ["darkly", "superhero", "solar"]
        self.is_dark_mode.set(is_dark)
        
        # C·∫≠p nh·∫≠t m√†u log text n·∫øu tab log ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
        if hasattr(self, 'log_tab') and hasattr(self.log_tab, 'log_text'):
            bg_color = "#f7f7f7" if not is_dark else "#2a2a2a"
            fg_color = "#000000" if not is_dark else "#ffffff"
            self.log_tab.log_text.config(bg=bg_color, fg=fg_color)
            
        # L∆∞u c·∫•u h√¨nh
        self._save_config()
        
    def _update_language(self, *args):
        """C·∫≠p nh·∫≠t ng√¥n ng·ªØ khi ng∆∞·ªùi d√πng thay ƒë·ªïi"""
        if not self.ui_initialized:
            return
            
        # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ c·ª≠a s·ªï
        self.master.title(self._("app_title"))
        
        # C·∫≠p nh·∫≠t t√™n c√°c tab
        if hasattr(self, 'notebook'):
            tabs = {
                0: self._("basic_tab"),
                1: self._("geo_tab"),
                2: self._("advanced_tab"),
                3: self._("options_tab"),
                4: self._("log_tab")
            }
            
            for idx, text in tabs.items():
                if idx < self.notebook.index('end'):
                    self.notebook.tab(idx, text=f"{ICONS.get(self._tab_icon_key(idx), 'üìÑ')} {text}")
                    
        # L∆∞u c·∫•u h√¨nh
        self._save_config()
        
    def _update_geo_options(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c t√πy ch·ªçn xu·∫•t ·∫£nh ƒë·ªãa l√Ω d·ª±a v√†o vi·ªác b·∫≠t/t·∫Øt chuy·ªÉn ƒë·ªïi h·ªá t·ªça ƒë·ªô"""
        # Ki·ªÉm tra xem UI ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        if not hasattr(self, 'ui_initialized') or not self.ui_initialized:
            return
            
        if not hasattr(self, 'preserve_geo_check') or not hasattr(self, 'geo_format_menu'):
            return
            
        if self.enable_reproject.get():
            self.preserve_geo_check["state"] = "normal"
            if self.preserve_geospatial.get():
                self.geo_format_menu["state"] = "normal"
            else:
                self.geo_format_menu["state"] = "disabled"
        else:
            self.preserve_geo_check["state"] = "disabled"
            self.geo_format_menu["state"] = "disabled"
            
        # C·∫≠p nh·∫≠t UI
        self.master.update()
        
    def _load_config(self):
        """N·∫°p c·∫•u h√¨nh t·ª´ file"""
        # C√†i ƒë·∫∑t c∆° b·∫£n
        self.remove_white_bg.set(get_config("remove_white_bg", False))
        self.remove_black_bg.set(get_config("remove_black_bg", False))
        self.input_folder = get_config("last_input", "")
        self.output_folder = get_config("last_output", "")
        self.input_path_var.set(self.input_folder)
        self.output_path_var.set(self.output_folder)
        self.output_format_var.set(get_config("output_format", ".png"))
        self.scale_ratio_var.set(get_config("scale_ratio", "1.0"))
        
        # C√†i ƒë·∫∑t h·ªá t·ªça ƒë·ªô
        self.enable_reproject.set(get_config("enable_reproject", False))
        self.target_crs_var.set(get_config("target_crs", "EPSG:4326"))
        self.preserve_geospatial.set(get_config("preserve_geospatial", True))
        self.geo_format_var.set(get_config("geo_format", "GeoTIFF (.tif)"))
        
        # C√†i ƒë·∫∑t ƒëi·ªÅu ch·ªânh ·∫£nh
        self.brightness_var.set(get_config("brightness", "1.0"))
        self.contrast_var.set(get_config("contrast", "1.0"))
        self.saturation_var.set(get_config("saturation", "1.0"))
        
        # C√†i ƒë·∫∑t giao di·ªán
        self.theme_var.set(get_config("theme", "cosmo"))
        self.language_var.set(get_config("language", "en"))
        
    def _save_config(self):
        """L∆∞u c·∫•u h√¨nh v√†o file"""
        config = {
            # C√†i ƒë·∫∑t c∆° b·∫£n
            "remove_white_bg": self.remove_white_bg.get(),
            "remove_black_bg": self.remove_black_bg.get(),
            "last_input": self.input_folder,
            "last_output": self.output_folder,
            "output_format": self.output_format_var.get(),
            "scale_ratio": self.scale_ratio_var.get(),
            
            # C√†i ƒë·∫∑t h·ªá t·ªça ƒë·ªô
            "enable_reproject": self.enable_reproject.get(),
            "target_crs": self.target_crs_var.get(),
            "preserve_geospatial": self.preserve_geospatial.get(),
            "geo_format": self.geo_format_var.get(),
            
            # C√†i ƒë·∫∑t ƒëi·ªÅu ch·ªânh ·∫£nh
            "brightness": self.brightness_var.get(),
            "contrast": self.contrast_var.get(),
            "saturation": self.saturation_var.get(),
            
            # C√†i ƒë·∫∑t giao di·ªán
            "theme": self.theme_var.get(),
            "language": self.language_var.get()
        }
        config_manager.update(config)
        
    def browse_input(self):
        """Ch·ªçn file ·∫£nh ƒë·∫ßu v√†o"""
        paths = filedialog.askopenfilenames(title="Ch·ªçn ·∫£nh ngu·ªìn", filetypes=[("Images", "*.tif *.tiff *.png *.jpg *.jpeg *.bmp")])
        if paths:
            self.input_files = list(paths)
            self.input_folder = os.path.dirname(paths[0])
            self.input_path_var.set(" ; ".join(os.path.basename(f) for f in paths))
            self.logger.log(f"{ICONS['input']} {self._('selected_files')}: {len(paths)}")
            
            # T·ª± ƒë·ªông ph√°t hi·ªán h·ªá t·ªça ƒë·ªô sau khi ch·ªçn file
            if any(p.lower().endswith(('.tif', '.tiff')) for p in paths):
                self.detect_crs()
        
    def browse_input_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ·∫£nh ƒë·∫ßu v√†o"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh ngu·ªìn")
        if folder:
            self.input_folder = folder
            self.input_files = []
            self.input_path_var.set(folder)
            self.logger.log(f"{ICONS['input']} {self._('selected_folder')}: {folder}")
            
            # Ki·ªÉm tra xem c√≥ file tif/tiff trong th∆∞ m·ª•c kh√¥ng
            if any(f.lower().endswith(('.tif', '.tiff')) for f in os.listdir(folder)):
                self.detect_crs()
                
    def browse_output(self):
        """Ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh")
        if folder:
            self.output_folder = folder
            self.output_path_var.set(folder)
            self.logger.log(f"{ICONS['output']} {self._('selected_output')}: {folder}")
            
    def handle_drop_input(self, event):
        """X·ª≠ l√Ω k√©o th·∫£ file/th∆∞ m·ª•c ƒë·∫ßu v√†o"""
        dropped = self.master.tk.splitlist(event.data)
        self.input_files = []
        folder_dropped = None
        for path in dropped:
            if os.path.isdir(path):
                folder_dropped = path
                self.logger.log(f"{ICONS['input']} {self._('dropped_folder')}: {path}")
            elif os.path.isfile(path):
                self.input_files.append(path)
        if self.input_files:
            self.input_path_var.set(" ; ".join(os.path.basename(f) for f in self.input_files))
            self.logger.log(f"{ICONS['input']} {self._('dropped_files')}: {len(self.input_files)}")
            # Ki·ªÉm tra xem c√≥ file tif/tiff n√†o ƒë∆∞·ª£c k√©o th·∫£ kh√¥ng
            if any(f.lower().endswith(('.tif', '.tiff')) for f in self.input_files):
                self.detect_crs()
        elif folder_dropped:
            self.input_folder = folder_dropped
            self.input_path_var.set(folder_dropped)
            # Ki·ªÉm tra xem c√≥ file tif/tiff trong th∆∞ m·ª•c kh√¥ng
            if any(f.lower().endswith(('.tif', '.tiff')) for f in os.listdir(folder_dropped)):
                self.detect_crs()
                
    def handle_drop_output(self, event):
        """X·ª≠ l√Ω k√©o th·∫£ th∆∞ m·ª•c ƒë·∫ßu ra"""
        dropped = self.master.tk.splitlist(event.data)
        for path in dropped:
            if os.path.isdir(path):
                self.output_folder = path
                self.output_path_var.set(path)
                self.logger.log(f"{ICONS['output']} {self._('dropped_output')}: {path}")
                
    def detect_crs(self):
        """Ph√°t hi·ªán v√† hi·ªÉn th·ªã h·ªá t·ªça ƒë·ªô c·ªßa ·∫£nh ƒë√£ ch·ªçn"""
        # Reset
        self.detected_crs_var.set(self._("no_crs_info"))
        
        # Ki·ªÉm tra xem c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not self.input_files:
            self.logger.log(self._("no_files_selected"))
            return
            
        # L·ªçc ra c√°c file TIF/TIFF
        tif_files = [f for f in self.input_files if f.lower().endswith(('.tif', '.tiff'))]
        
        if not tif_files:
            self.logger.log(self._("no_tiff_found"))
            self.detected_crs_var.set(self._("no_tiff_found"))
            return
            
        # Ph√°t hi·ªán CRS t·ª´ file ƒë·∫ßu ti√™n
        result = self.geo_processor.detect_crs(tif_files[0])
        
        if result:
            self.logger.log(f"{self._('detected_crs')} {result}")
            self.detected_crs_var.set(str(result))
        else:
            self.logger.log(self._("no_crs_info"))
            self.detected_crs_var.set(self._("no_crs_info"))
            
    def export_metadata(self, format_type):
        """Xu·∫•t metadata t·ª´ c√°c ·∫£nh ƒë∆∞·ª£c ch·ªçn"""
        if not self.input_files and not self.input_folder:
            self.logger.log(f"{ICONS['warning']} {self._('no_files_selected')}")
            return
            
        # X√°c ƒë·ªãnh danh s√°ch file c·∫ßn x·ª≠ l√Ω
        files = self.input_files or [
            os.path.join(self.input_folder, f)
            for f in os.listdir(self.input_folder)
            if f.lower().endswith(('.tif', '.tiff', '.png', '.jpg', '.jpeg', '.bmp'))
        ]
        
        if not files:
            self.logger.log(f"{ICONS['warning']} {self._('no_tiff_found')}")
            return
            
        # X√°c ƒë·ªãnh n∆°i l∆∞u file metadata
        if not self.output_folder:
            self.logger.log(f"{ICONS['warning']} {self._('no_output_selected')}")
            return
            
        # S·ª≠ d·ª•ng MetadataProcessor ƒë·ªÉ xu·∫•t metadata
        self.metadata_processor.export_metadata(files, self.output_folder, format_type)
        
    def start_conversion(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ·∫£nh"""
        if not self.input_folder and not self.input_files:
            self.logger.log(f"{ICONS['warning']} {self._('no_input_selected')}")
            return
            
        if not self.output_folder:
            self.logger.log(f"{ICONS['warning']} {self._('no_output_selected')}")
            return

        self._save_config()
        os.makedirs(self.output_folder, exist_ok=True)
        
        # S·ª≠ d·ª•ng lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng treo giao di·ªán
        thread = threading.Thread(target=self._process_images, daemon=True)
        thread.start()
        
    def _process_images(self):
        """X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ·∫£nh"""
        # ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω
        self.is_processing = True
        self.status_var.set(self._("processing"))
        
        # X√°c ƒë·ªãnh danh s√°ch file c·∫ßn x·ª≠ l√Ω
        files = self.input_files or [
            os.path.join(self.input_folder, f)
            for f in os.listdir(self.input_folder)
            if f.lower().endswith(('.tif', '.tiff', '.png', '.jpg', '.jpeg', '.bmp'))
        ]
        
        # Thi·∫øt l·∫≠p thanh ti·∫øn tr√¨nh
        total = len(files)
        self.progress["maximum"] = total
        self.logger.log(f"üìä {self._('total_images')}: {total}")
        
        # X·ª≠ l√Ω t·ª´ng file
        processed_files = []
        for idx, path in enumerate(files, 1):
            # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
            self.progress["value"] = idx
            self.master.update_idletasks()
            
            try:
                # N·∫øu c·∫ßn chuy·ªÉn ƒë·ªïi h·ªá t·ªça ƒë·ªô
                geo_metadata = None
                if self.enable_reproject.get() and path.lower().endswith(('.tif', '.tiff')):
                    try:
                        # L·∫•y h·ªá t·ªça ƒë·ªô ƒë√≠ch
                        dst_crs = ""
                        for name, code in COMMON_CRS.items():
                            if name == self.target_crs_var.get():
                                dst_crs = code
                                break
                                
                        # Chuy·ªÉn ƒë·ªïi h·ªá t·ªça ƒë·ªô
                        if dst_crs and self.preserve_geospatial.get():
                            # N·∫øu c·∫ßn l∆∞u th√¥ng tin ƒë·ªãa l√Ω, l·∫•y metadata
                            geo_metadata = self.geo_processor.extract_geo_metadata(
                                path, 
                                dst_crs, 
                                None if self.source_crs_var.get() == "T·ª± ƒë·ªông ph√°t hi·ªán" else COMMON_CRS[self.source_crs_var.get()]
                            )
                    except Exception as e:
                        self.logger.log(f"‚ö†Ô∏è {self._('error_prefix')}: {e}")
                        self.logger.log(f"‚ö†Ô∏è {self._('continue_with_original')}")
                        
                # X·ª≠ l√Ω ·∫£nh
                img_options = {
                    'output_format': self.output_format_var.get(),
                    'scale_ratio': self.scale_ratio_var.get(),
                    'remove_black': self.remove_black_bg.get(),
                    'remove_white': self.remove_white_bg.get(),
                    'brightness': self.brightness_var.get(),
                    'contrast': self.contrast_var.get(),
                    'saturation': self.saturation_var.get()
                }
                
                # X·ª≠ l√Ω ·∫£nh b√¨nh th∆∞·ªùng (kh√¥ng l∆∞u th√¥ng tin ƒë·ªãa l√Ω)
                if not (self.enable_reproject.get() and self.preserve_geospatial.get() and geo_metadata):
                    # X·ª≠ l√Ω ·∫£nh th√¥ng th∆∞·ªùng
                    output_path = self.image_processor.process_image(path, self.output_folder, **img_options)
                    if output_path:
                        processed_files.append(output_path)
                else:
                    # X·ª≠ l√Ω ·∫£nh v·ªõi th√¥ng tin ƒë·ªãa l√Ω
                    # 1. M·ªü v√† x·ª≠ l√Ω ·∫£nh
                    output_path = self.image_processor.process_image(path, self.output_folder, **img_options)
                    
                    # 2. N·∫øu c√≥ metadata ƒë·ªãa l√Ω, l∆∞u l·∫°i v·ªõi th√¥ng tin ƒë·ªãa l√Ω
                    if geo_metadata and output_path:
                        # C·∫≠p nh·∫≠t metadata n·∫øu c√≥ thay ƒë·ªïi k√≠ch th∆∞·ªõc
                        if float(self.scale_ratio_var.get()) != 1.0:
                            geo_metadata = self.geo_processor.update_geo_metadata_scale(
                                geo_metadata, 
                                float(self.scale_ratio_var.get())
                            )
                            
                        # L∆∞u v·ªõi th√¥ng tin ƒë·ªãa l√Ω
                        from PIL import Image
                        img = Image.open(output_path)
                        
                        # Ch·ªçn ph·∫ßn m·ªü r·ªông d·ª±a tr√™n ƒë·ªãnh d·∫°ng
                        geo_ext = ".tif"
                        if self.geo_format_var.get() == "GeoJPEG2000 (.jp2)":
                            geo_ext = ".jp2"
                        elif self.geo_format_var.get() == "ERDAS Imagine (.img)":
                            geo_ext = ".img"
                        
                        # ƒê·ªïi t√™n file theo ƒë·ªãnh d·∫°ng ƒë·ªãa l√Ω
                        geo_output_path = os.path.splitext(output_path)[0] + geo_ext
                        
                        # L∆∞u ·∫£nh v·ªõi th√¥ng tin ƒë·ªãa l√Ω
                        self.geo_processor.save_with_geospatial(img, geo_output_path, geo_metadata)
                        
                        # X√≥a file t·∫°m
                        try:
                            os.remove(output_path)
                        except:
                            pass
                            
                        processed_files.append(geo_output_path)
                        
                # C·∫≠p nh·∫≠t giao di·ªán v√† log
                pct = (idx / total) * 100
                self.logger.log(f"‚úÖ [{idx}/{total}] {self._('completed')} ({pct:.2f}%)")
                
            except Exception as e:
                self.logger.log(f"‚ùå {self._('error_prefix')} {os.path.basename(path)}: {e}")
        
        # Ho√†n t·∫•t
        self.logger.log(f"üéâ {self._('all_completed')}")
        self.status_var.set(self._("completed"))
        self.is_processing = False 