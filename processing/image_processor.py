"""
X·ª≠ l√Ω h√¨nh ·∫£nh c∆° b·∫£n
"""

import os
import time
import numpy as np
from PIL import Image, ImageEnhance
import multiprocessing
from resources.constants import RESAMPLE

try:
    RESAMPLE = Image.Resampling.LANCZOS
except AttributeError:
    RESAMPLE = Image.ANTIALIAS

class ImageProcessor:
    """L·ªõp x·ª≠ l√Ω h√¨nh ·∫£nh c∆° b·∫£n"""
    
    def __init__(self, logger=None):
        """Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω h√¨nh ·∫£nh"""
        from utils.logger import logger as default_logger
        self.logger = logger or default_logger
        self.num_cores = multiprocessing.cpu_count()
        
    def _apply_adjustments(self, img, brightness=1.0, contrast=1.0, saturation=1.0):
        """√Åp d·ª•ng c√°c ƒëi·ªÅu ch·ªânh cho ·∫£nh"""
        try:
            # ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng
            brightness = float(brightness)
            if brightness != 1.0:
                img = ImageEnhance.Brightness(img).enhance(brightness)
                
            # ƒêi·ªÅu ch·ªânh ƒë·ªô t∆∞∆°ng ph·∫£n
            contrast = float(contrast)
            if contrast != 1.0:
                img = ImageEnhance.Contrast(img).enhance(contrast)
                
            # ƒêi·ªÅu ch·ªânh ƒë·ªô b√£o h√≤a
            saturation = float(saturation)
            if saturation != 1.0:
                img = ImageEnhance.Color(img).enhance(saturation)
                
        except Exception as e:
            if self.logger:
                self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('adjustment_error')} - {e}")
            
        return img
        
    def remove_background(self, img, remove_black=False, remove_white=False):
        """X·ª≠ l√Ω n·ªÅn ·∫£nh (lo·∫°i b·ªè m√†u ƒëen ho·∫∑c tr·∫Øng)"""
        try:
            if not (remove_black or remove_white):
                return img
                
            data = np.array(img)
            mask = np.zeros(data.shape[:2], bool)
            
            if remove_white:
                mask |= np.all(data[..., :3] == 255, axis=-1)
                
            if remove_black:
                mask |= np.all(data[..., :3] == 0, axis=-1)
                
            data[mask] = (0, 0, 0, 0)
            return Image.fromarray(data)
        except Exception as e:
            if self.logger:
                self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('background_error')} - {e}")
            return img
            
    def resize_image(self, img, scale_ratio):
        """Thay ƒë·ªïi k√≠ch th∆∞·ªõc ·∫£nh"""
        try:
            scale = float(scale_ratio)
            if scale > 0 and scale != 1.0:
                new_size = (int(img.width * scale), int(img.height * scale))
                img = img.resize(new_size, RESAMPLE)
                if self.logger:
                    self.logger.log(f"‚ÑπÔ∏è {self._('info_prefix')}: {self._('resized')} {new_size[0]}x{new_size[1]}")
        except Exception as e:
            if self.logger:
                self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('resize_error')} - {e}")
        return img
        
    def process_image(self, image_path, output_folder, output_format=None, 
                      scale_ratio=None, remove_black=False, remove_white=False,
                      brightness=None, contrast=None, saturation=None, **kwargs):
        """
        X·ª≠ l√Ω ·∫£nh v·ªõi c√°c t√πy ch·ªçn c∆° b·∫£n
        
        Tham s·ªë:
            image_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·∫ßn x·ª≠ l√Ω
            output_folder (str): Th∆∞ m·ª•c l∆∞u ·∫£nh ƒë·∫ßu ra
            output_format (str): ƒê·ªãnh d·∫°ng ƒë·∫ßu ra (v√≠ d·ª•: ".png", ".jpg")
            scale_ratio (float): T·ª∑ l·ªá thay ƒë·ªïi k√≠ch th∆∞·ªõc
            remove_black (bool): X√≥a n·ªÅn ƒëen hay kh√¥ng
            remove_white (bool): X√≥a n·ªÅn tr·∫Øng hay kh√¥ng
            brightness (float): ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng
            contrast (float): ƒêi·ªÅu ch·ªânh ƒë·ªô t∆∞∆°ng ph·∫£n
            saturation (float): ƒêi·ªÅu ch·ªânh ƒë·ªô b√£o h√≤a
            **kwargs: C√°c tham s·ªë b·ªï sung, c√≥ th·ªÉ l√† m·ªôt ƒë·ªëi t∆∞·ª£ng options
        """
        try:
            # Ki·ªÉm tra c√≥ ƒë·ªëi t∆∞·ª£ng options ƒë∆∞·ª£c truy·ªÅn v√†o hay kh√¥ng
            options = kwargs.get('options', None)
            
            # N·∫øu c√≥ options, s·ª≠ d·ª•ng c√°c gi√° tr·ªã t·ª´ options
            if options and isinstance(options, object):
                output_format = getattr(options, 'export_format', output_format)
                scale_ratio = getattr(options, 'scale_ratio', scale_ratio)
                remove_black = getattr(options, 'remove_black', remove_black)
                remove_white = getattr(options, 'remove_white', remove_white)
                brightness = getattr(options, 'brightness', brightness)
                contrast = getattr(options, 'contrast', contrast)
                saturation = getattr(options, 'saturation', saturation)
            
            # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh
            output_format = output_format or ".png"
            scale_ratio = scale_ratio or "1.0"
            brightness = brightness or "1.0"
            contrast = contrast or "1.0"
            saturation = saturation or "1.0"
            
            # M·ªü ·∫£nh
            img = Image.open(image_path).convert("RGBA")
            
            # √Åp d·ª•ng c√°c ƒëi·ªÅu ch·ªânh
            img = self._apply_adjustments(img, brightness, contrast, saturation)
            
            # X·ª≠ l√Ω n·ªÅn
            img = self.remove_background(img, remove_black, remove_white)
            
            # Thay ƒë·ªïi k√≠ch th∆∞·ªõc
            img = self.resize_image(img, scale_ratio)
            
            # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu ƒë·ªãnh d·∫°ng ƒë·∫ßu ra l√† JPG
            if output_format.lower() == ".jpg" or output_format.lower() == "jpg":
                img = img.convert("RGB")
                
            # T·∫°o t√™n file ƒë·∫ßu ra
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            scale_prefix = f"{scale_ratio}x-" if float(scale_ratio) != 1.0 else ""
            
            # ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë·∫ßu ra c√≥ d·∫•u ch·∫•m
            if not output_format.startswith('.'):
                output_format = '.' + output_format
                
            output_path = os.path.join(output_folder, f"{scale_prefix}{base_name}{output_format}")
            
            # L∆∞u ·∫£nh
            img.save(output_path)
            return output_path
            
        except Exception as e:
            if self.logger:
                self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('processing_error')} {os.path.basename(image_path)} - {e}")
            return None
            
    def batch_process(self, files, output_folder, **kwargs):
        """X·ª≠ l√Ω h√†ng lo·∫°t ·∫£nh"""
        if not files:
            if self.logger:
                self.logger.log(f"‚ö†Ô∏è {self._('warning_prefix')}: {self._('no_files_selected')}")
            return []
            
        start_time = time.time()
        processed_files = []
        total = len(files)
        
        if self.logger:
            self.logger.log(f"üìä {self._('info_prefix')}: {self._('total_images')} - {total}")
            
        for idx, path in enumerate(files, 1):
            try:
                output_path = self.process_image(path, output_folder, **kwargs)
                if output_path:
                    processed_files.append(output_path)
                    
                if self.logger:
                    pct = (idx / total) * 100
                    self.logger.log(f"‚úÖ {self._('success_prefix')}: [{idx}/{total}] {self._('completed')} ({pct:.2f}%)")
            except Exception as e:
                if self.logger:
                    self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('processing_error')} {os.path.basename(path)} - {e}")
                    
        # Th·ªëng k√™ th·ªùi gian
        elapsed = time.time() - start_time
        mins, secs = divmod(elapsed, 60)
        
        if self.logger:
            self.logger.log(f"üéâ {self._('success_prefix')}: {self._('all_completed')}")
            self.logger.log(f"‚è±Ô∏è {self._('info_prefix')}: {self._('processing_time')} - {int(mins)} {self._('minutes')} {secs:.2f} {self._('seconds')}")
            
        return processed_files

    def process_batch(self, image_files, output_dir, options):
        """X·ª≠ l√Ω h√†ng lo·∫°t ·∫£nh s·ª≠ d·ª•ng ƒëa lu·ªìng"""
        if not image_files:
            return []
            
        # T√≠nh to√°n s·ªë lu·ªìng ph√π h·ª£p d·ª±a tr√™n s·ªë l∆∞·ª£ng ·∫£nh v√† cores
        n_threads = min(self.num_cores, len(image_files))
        
        if n_threads > 1 and len(image_files) > 1:
            # Chia nh·ªè c√¥ng vi·ªác
            chunk_size = max(1, len(image_files) // n_threads)
            chunks = [image_files[i:i + chunk_size] for i in range(0, len(image_files), chunk_size)]
            
            # S·ª≠ d·ª•ng Pool ƒë·ªÉ x·ª≠ l√Ω song song
            with multiprocessing.Pool(processes=n_threads) as pool:
                results = pool.starmap(
                    self._process_image_batch,
                    [(chunk, output_dir, options) for chunk in chunks]
                )
            
            # K·∫øt h·ª£p c√°c k·∫øt qu·∫£
            processed_files = []
            for result in results:
                processed_files.extend(result)
            
            return processed_files
        else:
            # X·ª≠ l√Ω tu·∫ßn t·ª±
            return self._process_image_batch(image_files, output_dir, options)
    
    def _process_image_batch(self, image_files, output_dir, options):
        """X·ª≠ l√Ω m·ªôt nh√≥m ·∫£nh (ƒë∆∞·ª£c g·ªçi b·ªüi t·ª´ng thread)"""
        processed_files = []
        
        for image_path in image_files:
            try:
                output_path = self.process_image(image_path, output_dir, options=options)
                if output_path:
                    processed_files.append(output_path)
            except Exception as e:
                self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('processing_error')} {os.path.basename(image_path)} - {e}")
        
        return processed_files
    
    def _remove_background(self, img, is_black=True):
        """Lo·∫°i b·ªè n·ªÅn ƒëen ho·∫∑c tr·∫Øng kh·ªèi ·∫£nh (t·ªëi ∆∞u h√≥a)"""
        # Chuy·ªÉn ƒë·ªïi th√†nh RGBA n·∫øu c·∫ßn
        if img.mode != 'RGBA':
            img = img.convert('RGBA')
        
        # Chuy·ªÉn sang numpy array ƒë·ªÉ x·ª≠ l√Ω nhanh h∆°n
        data = np.array(img)
        
        # T·∫°o m·∫∑t n·∫° alpha d·ª±a tr√™n m√†u n·ªÅn
        if is_black:
            # T√¨m c√°c pixel ƒëen (R, G, B ƒë·ªÅu g·∫ßn 0)
            mask = (data[:,:,0] < 10) & (data[:,:,1] < 10) & (data[:,:,2] < 10)
        else:
            # T√¨m c√°c pixel tr·∫Øng (R, G, B ƒë·ªÅu g·∫ßn 255)
            mask = (data[:,:,0] > 245) & (data[:,:,1] > 245) & (data[:,:,2] > 245)
        
        # ƒê·∫∑t alpha = 0 cho c√°c pixel n·ªÅn
        data[:,:,3][mask] = 0
        
        # T·∫°o ·∫£nh m·ªõi t·ª´ m·∫£ng ƒë√£ x·ª≠ l√Ω
        return Image.fromarray(data) 

    def adjust_image(self, image, brightness=1.0, contrast=1.0, saturation=1.0):
        """ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng, ƒë·ªô t∆∞∆°ng ph·∫£n v√† ƒë·ªô b√£o h√≤a"""
        try:
            # Chuy·ªÉn ƒë·ªïi v·ªÅ float ƒë·ªÉ t√≠nh to√°n
            brightness = float(brightness)
            contrast = float(contrast)
            saturation = float(saturation)
            
            # Ki·ªÉm tra n·∫øu kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh
            if brightness == 1.0 and contrast == 1.0 and saturation == 1.0:
                return image
            
            # T·∫°o enhancer v√† √°p d·ª•ng
            if brightness != 1.0:
                enhancer = ImageEnhance.Brightness(image)
                image = enhancer.enhance(brightness)
                
            if contrast != 1.0:
                enhancer = ImageEnhance.Contrast(image)
                image = enhancer.enhance(contrast)
                
            if saturation != 1.0:
                enhancer = ImageEnhance.Color(image)
                image = enhancer.enhance(saturation)
                
            return image
        except Exception as e:
            self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('adjustment_error')} - {e}")
            return image

    def batch_process_with_options(self, file_paths, output_dir, options=None):
        """
        X·ª≠ l√Ω h√†ng lo·∫°t v·ªõi c√°c t√πy ch·ªçn
        
        Tham s·ªë:
            file_paths (list): Danh s√°ch ƒë∆∞·ªùng d·∫´n ·∫£nh c·∫ßn x·ª≠ l√Ω
            output_dir (str): Th∆∞ m·ª•c ƒë·∫ßu ra
            options (dict): C√°c t√πy ch·ªçn x·ª≠ l√Ω
        """
        if options is None:
            options = {}
            
        try:
            return self.process_batch(file_paths, output_dir, **options)
        except Exception as e:
            self.logger.log(f"‚ùå {self._('error_prefix')}: {self._('processing_error')} {os.path.basename(image_path)} - {e}")
            return [] 